go.property("zoom_into_glue", 0)

function init(self)
	init_globals()	

	main = self
	-- set blue background
    msg.post("@render:", "clear_color", { color = vmath.vector4(0, 0.1, 0.1, 0) } )
	msg.post(".", "acquire_input_focus")
	
	msg.post("#gui", "set_difficulty")
	msg.post("#gui", "set_volume")		
	
	particlefx.play("dust#fx")	
	set_time_step()
	
end

function update(self, dt)
	if game_stage == MAIN_STAGE then
		game_time = game_time + dt
		if glue_cooldown > 0 then
			glue_cooldown = glue_cooldown - dt
		end
	end
	for k,v in pairs(sound_cooldown) do
		sound_cooldown[k] = v - dt
		if v < 0 then
			sound_cooldown[k] = nil			
		end
	end
	
	
	if self.zoom_into_glue > 0 and self.zoom_into_glue < 1 then
		set_time_step()
	end
	
	zoom = 2 - self.zoom_into_glue/2
	
	sprite.set_constant("background#sprite", "tint", vmath.vector4(1, 1, 1, 1 - self.zoom_into_glue))
	go.set_scale(zoom, "background")
	go.set_position(vmath.vector3(view_center.x, view_center.y, -0.2), "background")
end

function win()
	msg.post("main#gui", "win")
end

function on_message(self, message_id, message, sender)	
	if message_id == hash("win") or message_id == hash("game_over") then
		game_stage = GAME_OVER_STAGE
	elseif message_id == hash("glue_healing") then
		cumulative_healing = cumulative_healing + message.healing
		while cumulative_healing >= 3 do
			local healing_value = math.min(20, cumulative_healing) 
			cumulative_healing = cumulative_healing - healing_value			
			factory.create("healing_glue#factory", vmath.vector3(max_x/2, max_y * 0.95, 0), nil, {healing = true, glue = healing_value})			
		end		
	elseif message_id == hash("toggle_glue") then		
		if glue_time then
			glue_time = false
			
			go.animate("#script", "zoom_into_glue", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_INOUTSINE, 0.2, 0, 
				function(self, url, property) 
					set_time_step() 
				end
			)			
					
		elseif protatree and protatree:can_into_glue() then 
			glue_time = true			
			go.animate("#script", "zoom_into_glue", go.PLAYBACK_ONCE_FORWARD, 1, go.EASING_INOUTSINE, 0.2, 0, 
				function(self, url, property) 
					set_time_step() 
				end
			)			
		end			
		glue_cooldown = math.max(glue_cooldown, 0.5)
		msg.post("#gui", "glue_time", {enabled = glue_time})		
	end
	
end

paused = false

function toggle_pause()
	paused = not paused
	set_time_step()
	msg.post("#gui", "paused", {paused = paused}) 
end

function save_settings()
	sys.save(settings_file_path, settings)
end

function on_input(self, action_id, action)
	
	protatree:on_input(action_id, action)
	
    if action_id == hash("ok") and action.pressed then
	elseif action_id == hash("pause") and action.pressed then
		toggle_pause()
	elseif action.pressed and paused then
		toggle_pause()
	elseif action_id == nil then
		mouse_position = vmath.vector3(action.x, action.y, 0)
	elseif action_id == hash("difficulty_down") and action.pressed then
		if settings.difficulty > -3 then
			settings.difficulty = settings.difficulty - 1
			msg.post("#gui", "set_difficulty")
			save_settings()
		end
	elseif action_id == hash("difficulty_up") and action.pressed then
		settings.difficulty = settings.difficulty + 1
		msg.post("#gui", "set_difficulty")
		save_settings()
	elseif action_id == hash("volume_up") and action.pressed then
		settings.volume = settings.volume - 1
		msg.post("#gui", "set_volume")
		play_sound("coin")			
		save_settings() 
	elseif action_id == hash("volume_down") and action.pressed then
		settings.volume = settings.volume + 1
		msg.post("#gui", "set_volume")
		play_sound("coin")
		save_settings()		
	elseif action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	elseif action_id == hash("reset") then
		if action.pressed then
			msg.post("default:/loader", "reset")
		end
	elseif action_id == hash("start") then
		if action.pressed then			
			if game_stage == INTRO_STAGE then
				game_stage = MAIN_STAGE
				msg.post("#gui", "start_game")
			end
		end
	end		
end

function toggle_glue()
	msg.post("main", "toggle_glue")
end