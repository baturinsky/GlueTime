require "lib/lib"

go.property("protagonist", false)
go.property("good", false)
go.property("boss", false)
go.property("charge", 0)

function init(self)
	self.id = go.get_id()
	
	if self.protagonist then
			
		--msg.post(".", "acquire_input_focus")
				
		self.tree = GhostTree({good = true})		
				
		self.tree:from_string("607\n325")
										
		self.tree:appearify()

		self.tree.glue = self.tree.max_glue		
		
		protatree = self.tree
	end
	
	if not self.good then
		self.tree = GhostTree({good = false, ai = true})
				
		local p 
		
		if self.boss then

			boss_present = true
			self.tree.boss = true
			msg.post("main#gui", "boss_appears")
			self.tree:from_string(boss_plan)			
			
			p = vmath.vector3(view_center.x + 800, view_center.y, 0)						
		else
		
			--p.x = math.random(-100, 100) + view_center.x + 1600
			--p.y = math.random(-1000, 1000) + view_center.y
		
			local top_rank = 7 --math.min(7, 4 + math.floor(game_time/60))
			if math.random(1,100) + settings.difficulty * 5 > 50 then
				local root_rank = math.random(2,top_rank)
				self.tree:insert( Ghost(root_rank) )
				local satellites = math.min(6, math.random(1,1 + math.floor(game_time/60)))
				local a = vmath.quat_rotation_z(6.28 / satellites)
				local v = vmath.vector3(0, 60, 0)
				for i = 1, satellites do
					if math.random(1,100) + settings.difficulty * 5 > 50 then
						self.tree:insert( Ghost(math.random(1,root_rank-1), {position=v} ) )
					end
					v = vmath.rotate(a, v)
				end
			else
				self.tree:insert( Ghost(math.random(1,top_rank)) )
			end
			
			p = vmath.vector3(math.random(-100, 100) + view_center.x + 1600, math.random(-1000, 1000) + view_center.y, 0)			
		end				
		
		self.tree:appearify()	
		self.tree.position = p
								
		--self.tree:push(vmath.vector3(-700, 0, 0) * self.tree.mass)
		
	end	
end

function update(self, dt)		
	
	self.tree:update(self, dt)
	last_dt = dt
	
	if glue_time and self.protagonist then
		self.charge = self.charge + dt * glue_scale
	else
		self.charge = self.charge + dt
	end

	local p = go.get_position()
	
	if self.protagonist then		
		--self.tree:steer(vmath.vector3(self.tree.mass/200, 0, 0))			
		view_center = p -- + mouse_position - vmath.vector3(screen_width, screen_height, 0) * 0.5		
	else					
		if too_far(p) then	
			go.delete()
		end
	end
	
end

function on_message(self, message_id, message, sender)
	if message_id == hash("appearify") then
		self.tree:appearify()
	elseif message_id == hash("deappearify") then
		self.tree:deappearify()
	elseif message_id == hash("impact") then
		local ghost = collidersById[message.other_id]
		if self.protagonist and glue_time and ghost and message.applied_impulse==0 then
			if ghost and ghost.tree ~= self.tree then							
			
				if ghost.glue_resistant and ghost.tree.collidern > 1 then
					return
				end
								
				self.tree:insert(ghost)
				self.tree:appearify()
				
				toggle_glue()
				
				glue_cooldown = 2
				
			end			
		elseif message.applied_impulse > 1 or message.distance > 1 then			
					
			local applied_impulse
			if message.applied_impulse > 1 then
				applied_impulse = message.applied_impulse
			elseif message.distance > 1 then		
				self.tree.position = self.tree.position + message.normal * (message.distance * 0.5 + 2)
				local other_ghost = collidersById[message.other_id]
				if other_ghost and other_ghost.tree then
					local other = other_ghost.tree
					applied_impulse = self.tree:calculate_applied_impulse(other, message.position, message.normal)
				end
			end				
			if applied_impulse then
				self.tree:push(message.normal * applied_impulse, message.position)
				if applied_impulse > 100 then
					msg.post(message.collider, "murder", {damage=applied_impulse / 100})
					play_sound("click", math.min(applied_impulse/1000, 1))		
				end
			end
			
		end
	end
end


function final(self)
	self.tree:deappearify()
end